[metadata]
name = wfssrv
description = MMTO Wavefront Sensor Analysis Server
long_description = file: README.md
author = T. E. Pickering (MMT Observatory)
author_email = tim@mmto.org
license = BSD-3
license_file = LICENSE.rst
url = https://github.com/MMTObservatory/WFSsrv
edit_on_github = True
github_project = MMTObservatory/WFSsrv

[options]
zip_safe = False
packages = find:
python_requires = >=3.7
setup_requires = setuptools_scm
install_requires =
    tornado
    astropy
    mmtwfs
    camsrv

include_package_data = True

[options.extras_require]
docs =
    sphinx-astropy
test =
    tox
    pytest
    pytest-cov
    pytest-astropy
    nose
    coverage
    codecov
all =
    matplotlib
    scipy
    astropy
    photutils
    scikit-image
    dnspython
    poppy
    lmfit
    ccdproc
    astroscrappy
    redis

[options.entry_points]
console_scripts =
    wfs_header.py = wfssrv.scripts.wfs_header:main
    wfssrv = wfssrv.wfssrv:main

[options.package_data]
wfssrv.templates = *.html
wfssrv.static = */*
wfssrv.tests = coveragerc

[tool:pytest]
testpaths = "wfssrv" "docs"
astropy_header = true
doctest_plus = enabled
text_file_format = rst
addopts = --doctest-rst

[coverage:run]
parallel = True
branch = True
omit =
    wfssrv/_astropy_init*
    wfssrv/conftest.py
    wfssrv/*setup_package*
    wfssrv/tests/*
    wfssrv/*/tests/*
    wfssrv/extern/*
    wfssrv/version*
    */wfssrv/_astropy_init*
    */wfssrv/conftest.py
    */wfssrv/*setup_package*
    */wfssrv/tests/*
    */wfssrv/*/tests/*
    */wfssrv/extern/*
    */wfssrv/version*

[coverage:report]
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover
    # Don't complain about packages we have installed
    except ImportError
    # Don't complain if tests don't hit assertions
    raise AssertionError
    raise NotImplementedError
    # Don't complain about script hooks
    def main\(.*\):
    # Ignore branches that don't pertain to this version of Python
    pragma: py{ignore_python_version}
    # Don't complain about IPython completion helper
    def _ipython_key_completions_
